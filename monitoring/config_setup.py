#!/usr/bin/env python3
"""
LangSmith Configuration Setup for 12thhaus Spiritual Platform
Enhanced configuration management with environment setup.
"""

import os
import sys
from pathlib import Path
from typing import Optional, Dict, Any
from langsmith import Client

class LangSmithConfigManager:
    """Manages LangSmith configuration for the multi-agent platform."""
    
    def __init__(self):
        self.config_file = Path(".env")
        self.required_vars = [
            "LANGCHAIN_TRACING_V2",
            "LANGSMITH_ENDPOINT", 
            "LANGSMITH_API_KEY",
            "LANGSMITH_PROJECT"
        ]
    
    def setup_configuration(self, api_key: Optional[str] = None, project_name: Optional[str] = None) -> bool:
        """Set up LangSmith configuration."""
        
        print("=== 12thhaus Spiritual Platform - LangSmith Setup ===")
        
        # Get API key
        if not api_key:
            print("\nGet your API key from: https://smith.langchain.com/settings")
            api_key = input("Enter your LangSmith API key: ").strip()
        
        if not api_key:
            print("❌ No API key provided. Exiting.")
            return False
        
        # Validate API key format
        if not (api_key.startswith('lsv2__sk') or api_key.startswith('lsv2__pat')):
            print("⚠️  Warning: API key should start with 'lsv2__sk' or 'lsv2__pat'")
            proceed = input("Continue anyway? (y/n): ").lower().strip()
            if proceed != 'y':
                return False
        
        # Get project name
        if not project_name:
            project_name = input("Enter project name (default: 12thhaus-spiritual-platform): ").strip()
            if not project_name:
                project_name = "12thhaus-spiritual-platform"
        
        # Set environment variables
        config = {
            "LANGCHAIN_TRACING_V2": "true",
            "LANGSMITH_ENDPOINT": "https://api.smith.langchain.com",
            "LANGSMITH_API_KEY": api_key,
            "LANGSMITH_PROJECT": project_name
        }
        
        # Update .env file
        self._update_env_file(config)
        
        # Test connection
        if self._test_connection(config):
            print(f"\n✅ LangSmith configuration completed successfully!")
            print(f"📊 Project: {project_name}")
            print(f"🔗 Dashboard: https://smith.langchain.com/")
            return True
        else:
            print("❌ Configuration failed. Please check your API key.")
            return False
    
    def _update_env_file(self, config: Dict[str, str]):
        """Update .env file with LangSmith configuration."""
        
        # Read existing .env file
        existing_config = {}
        if self.config_file.exists():
            with open(self.config_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        existing_config[key] = value
        
        # Update with new LangSmith config
        existing_config.update(config)
        
        # Write back to .env file
        with open(self.config_file, 'w') as f:
            f.write("# 12thhaus Spiritual Platform Configuration\n")
            f.write("# Generated by LangSmith setup\n\n")
            
            # Group by category
            categories = {
                "LangSmith Configuration": [
                    "LANGCHAIN_TRACING_V2",
                    "LANGSMITH_ENDPOINT", 
                    "LANGSMITH_API_KEY",
                    "LANGSMITH_PROJECT"
                ],
                "Core API Keys": [
                    "ANTHROPIC_API_KEY",
                    "OPENAI_API_KEY"
                ],
                "Database Configuration": [
                    "SUPABASE_URL",
                    "SUPABASE_ANON_KEY",
                    "HASURA_GRAPHQL_ENDPOINT",
                    "HASURA_ADMIN_SECRET"
                ]
            }
            
            for category, keys in categories.items():
                f.write(f"# {category}\n")
                for key in keys:
                    if key in existing_config:
                        f.write(f"{key}={existing_config[key]}\n")
                    else:
                        f.write(f"# {key}=your_{key.lower()}_here\n")
                f.write("\n")
            
            # Add any remaining keys
            remaining_keys = set(existing_config.keys()) - {k for keys in categories.values() for k in keys}
            if remaining_keys:
                f.write("# Additional Configuration\n")
                for key in sorted(remaining_keys):
                    f.write(f"{key}={existing_config[key]}\n")
        
        print(f"✅ Configuration saved to {self.config_file.absolute()}")
    
    def _test_connection(self, config: Dict[str, str]) -> bool:
        """Test LangSmith connection."""
        
        print("\n=== Testing LangSmith Connection ===")
        
        try:
            # Set environment variables for testing
            for key, value in config.items():
                os.environ[key] = value
            
            # Initialize client
            client = Client(
                endpoint=config["LANGSMITH_ENDPOINT"],
                api_key=config["LANGSMITH_API_KEY"]
            )
            
            # Test basic connectivity
            print("Testing connection...")
            projects = list(client.list_projects())
            print(f"✅ Connection successful! Found {len(projects)} projects.")
            
            # Create project if it doesn't exist
            project_name = config["LANGSMITH_PROJECT"]
            existing_project = None
            
            for project in projects:
                if project.name == project_name:
                    existing_project = project
                    break
            
            if not existing_project:
                print(f"Creating project: {project_name}")
                project = client.create_project(
                    project_name=project_name,
                    description="12thhaus Spiritual Platform monitoring"
                )
                print(f"✅ Project created: {project.name}")
            else:
                print(f"✅ Using existing project: {existing_project.name}")
            
            return True
            
        except Exception as e:
            print(f"❌ Connection failed: {e}")
            print("\nTroubleshooting:")
            print("1. Check your API key is correct")
            print("2. Ensure you have internet connectivity") 
            print("3. Verify your account has access to the API")
            return False
    
    def validate_configuration(self) -> bool:
        """Validate existing LangSmith configuration."""
        
        if not self.config_file.exists():
            print("❌ No .env file found. Run setup first.")
            return False
        
        # Load environment variables
        from dotenv import load_dotenv
        load_dotenv(self.config_file)
        
        # Check required variables
        missing_vars = []
        for var in self.required_vars:
            if not os.getenv(var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"❌ Missing required variables: {missing_vars}")
            return False
        
        # Test connection
        try:
            client = Client()
            projects = list(client.list_projects())
            print(f"✅ LangSmith configuration valid. Found {len(projects)} projects.")
            return True
        except Exception as e:
            print(f"❌ LangSmith connection failed: {e}")
            return False
    
    def create_monitoring_setup(self):
        """Create monitoring setup for the multi-agent platform."""
        
        monitoring_code = '''
#!/usr/bin/env python3
"""
12thhaus Spiritual Platform - Monitoring Setup
Initializes comprehensive monitoring for all agents and workflows.
"""

import os
from langsmith import Client
from monitoring.traceable_wrappers import AgentWorkflowTracer
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def initialize_monitoring():
    """Initialize monitoring for the multi-agent platform."""
    
    print("🚀 Initializing 12thhaus Spiritual Platform Monitoring")
    print("=" * 60)
    
    # Initialize LangSmith client
    client = Client()
    
    # Initialize traceable wrappers
    tracer = AgentWorkflowTracer()
    
    print("✅ Monitoring initialized successfully!")
    print(f"📊 Project: {os.getenv('LANGSMITH_PROJECT')}")
    print(f"🔗 Dashboard: https://smith.langchain.com/")
    
    return tracer

if __name__ == "__main__":
    tracer = initialize_monitoring()
    
    # Example: Monitor a simple workflow
    example_task = {
        'type': 'example_workflow',
        'description': 'Test monitoring setup',
        'requirements': ['Basic tracing test']
    }
    
    print("\\n📝 Running example workflow with monitoring...")
    result = tracer.trace_multi_agent_coordination(example_task)
    
    print(f"✅ Example completed: {result['status']}")
    print("🎯 All systems monitored and ready!")
'''

        with open("monitoring_setup.py", "w") as f:
            f.write(monitoring_code)
        
        print("✅ Monitoring setup script created: monitoring_setup.py")

def main():
    """Main configuration setup function."""
    
    manager = LangSmithConfigManager()
    
    if len(sys.argv) > 1 and sys.argv[1] == "validate":
        # Validate existing configuration
        manager.validate_configuration()
    else:
        # Set up new configuration
        success = manager.setup_configuration()
        
        if success:
            create_monitoring = input("\nCreate monitoring setup? (y/n): ").lower().strip()
            if create_monitoring == 'y':
                manager.create_monitoring_setup()
            
            print("\n=== Next Steps ===")
            print("1. Install dependencies: pip install -r requirements.txt")
            print("2. Run monitoring setup: python monitoring_setup.py")
            print("3. Start your multi-agent workflows")
            print("4. Monitor in dashboard: https://smith.langchain.com/")

if __name__ == "__main__":
    main()
